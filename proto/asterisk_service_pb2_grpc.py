# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import asterisk_service_pb2 as asterisk__service__pb2

GRPC_GENERATED_VERSION = '1.73.1'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in asterisk_service_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class AsteriskConnectorStub(object):
    """Servicio para interactuar con Asterisk
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.HandleCallStream = channel.stream_stream(
                '/asterisk_service.AsteriskConnector/HandleCallStream',
                request_serializer=asterisk__service__pb2.CallStreamRequest.SerializeToString,
                response_deserializer=asterisk__service__pb2.CallStreamResponse.FromString,
                _registered_method=True)
        self.HangupCall = channel.unary_unary(
                '/asterisk_service.AsteriskConnector/HangupCall',
                request_serializer=asterisk__service__pb2.HangupCallRequest.SerializeToString,
                response_deserializer=asterisk__service__pb2.HangupCallResponse.FromString,
                _registered_method=True)


class AsteriskConnectorServicer(object):
    """Servicio para interactuar con Asterisk
    """

    def HandleCallStream(self, request_iterator, context):
        """Bidi-streaming para enviar audio a Asterisk y recibir eventos/audio
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def HangupCall(self, request, context):
        """Unary call para comandos simples como colgar una llamada
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_AsteriskConnectorServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'HandleCallStream': grpc.stream_stream_rpc_method_handler(
                    servicer.HandleCallStream,
                    request_deserializer=asterisk__service__pb2.CallStreamRequest.FromString,
                    response_serializer=asterisk__service__pb2.CallStreamResponse.SerializeToString,
            ),
            'HangupCall': grpc.unary_unary_rpc_method_handler(
                    servicer.HangupCall,
                    request_deserializer=asterisk__service__pb2.HangupCallRequest.FromString,
                    response_serializer=asterisk__service__pb2.HangupCallResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'asterisk_service.AsteriskConnector', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('asterisk_service.AsteriskConnector', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class AsteriskConnector(object):
    """Servicio para interactuar con Asterisk
    """

    @staticmethod
    def HandleCallStream(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(
            request_iterator,
            target,
            '/asterisk_service.AsteriskConnector/HandleCallStream',
            asterisk__service__pb2.CallStreamRequest.SerializeToString,
            asterisk__service__pb2.CallStreamResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def HangupCall(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/asterisk_service.AsteriskConnector/HangupCall',
            asterisk__service__pb2.HangupCallRequest.SerializeToString,
            asterisk__service__pb2.HangupCallResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
